server:
  port: 0 #本地开发环境时用，生产部署时，应该设置为0，系统随机创建端口
spring:
  redis:
    database: 0
    host: 192.168.0.107
    password: #默认为空
    port: 6380
    #      max-idle: 8 #最大空闲连接
    #      min-idle: 0 #最小空闲连接
    #      max-active: 8 #连接池最大连接数（使用负值表示没有限制）
    jedis:
      pool:
        max-idle: 8 #最大空闲连接
        min-idle: 0 #最小空闲连接
        max-active: 8 #连接池最大连接数（使用负值表示没有限制）
  main:
    allow-bean-definition-overriding: true
  application:
    name: dfbp-val-manage #服务名
  profiles:
    active: dev
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.0.107:3307/testdb?useUnicode=true&characterEncoding=utf8&useSSL=false&allowMultiQueries=true
    username: root
    password: 123456
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      minimum-idle: 5
      maximum-pool-size: 15
      auto-commit: true
      idle-timeout: 30000
      pool-name: DatebookHikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: SELECT 1
  quartz:
    job-store-type: jdbc #数据库方式
    jdbc:
      initialize-schema: never #不初始化表结构
    properties:
      org:
        quartz:
          scheduler:
            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
            #instanceName: clusteredScheduler #quartzScheduler
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX #持久化配置
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理
            useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            tablePrefix: QRTZ_  #数据库表前缀
            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            isClustered: true #打开群集功能
          threadPool: #连接池
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
eureka:
  instance:
    lease-renewal-interval-in-seconds: 10 # 续约更新时间间隔（默认是30秒）
    lease-expiration-duration-in-seconds: 30 #服务失效时间。默认是90秒，也就是如果Eureka Server在90秒内没有接收到来自ServiceProvider的Renew操作，就会把Service Provider剔除
    instance-id: ${spring.cloud.client.hostname}:${spring.cloud.client.ipAddress}:${random.int} #设置实例名
    prefer-ip-address: true #使用IP地址来做注册中心地址
  client:
    InitialInstanceInfoReplicationIntervalSeconds: 1 #最初复制实例信息到eureka服务器所需的时间（s），默认为40秒
    InstanceInfoReplicationIntervalSeconds: 10 #复制实例变化信息到eureka服务器所需要的时间间隔（s），默认为30秒
    RegistryFetchIntervalSeconds: 10 #从eureka服务器注册表中获取注册信息的时间间隔（s），默认为30秒
    service-url:
      defaultZone: http://192.168.0.60:10010/eureka/ #配置服务注册中心 多个用逗号分隔
mybatis:
  mapper-locations: classpath*:com/**/dao/**/*.xml
  type-aliases-package: com.win.dfbp.val.manage.entity
#PageHelper配置
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
